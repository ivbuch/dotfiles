set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required


Plugin 'VundleVim/Vundle.vim'
Plugin 'surround.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'tpope/vim-commentary.git' " simple comment/uncomment plugin
Plugin 'vim-airline/vim-airline-themes'
Plugin 'scrooloose/nerdtree'
Plugin 'ctrlp.vim'
Plugin 'benmills/vimux'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

set noswapfile
set nopaste
syntax on
set hlsearch
set number
set norelativenumber
set ignorecase
set shiftwidth=2
set foldmethod=manual
set hidden

" statusline
set laststatus=2
set statusline+=%F

set t_Co=256

" split new windows on right, bottom sides
set splitbelow
set splitright

set history=500


" nerd tree - close file browser on file select
let g:NERDTreeQuitOnOpen = 1

" vimux panel height
let g:VimuxHeight = "40"

" let ctrl search inside current dir
let g:ctrlp_working_path_mode = 'c'

" correct folding for xml files, see http://vim.wikia.com/wiki/Vim_as_XML_Editor
let g:xml_syntax_folding=1

" fileType properties
autocmd FileType xml    setlocal foldmethod=syntax foldlevel=100000
autocmd FileType py     setlocal expandtab shiftwidth=4
autocmd FileType groovy setlocal expandtab shiftwidth=5 tabstop=4
autocmd FileType json   setlocal foldmethod=syntax foldlevel=100000

" colorscheme darkblue
let g:airline_theme='light'

command! FixSvnPaths %s/\s\/.*plugins/ plugins/
command! FixIdeaPaths %s/^.*plugins/plugins/
command! UpdateCurrentDirectory cd %:p:h

let mapleader=","

" toggle paste mode
set pastetoggle=<F2>

" toggle wrap
nmap <F3> :set wrap!<CR>

" close buffer
nmap <F4> :bd <CR>
nmap <Leader><F4> :bd! <CR>

"select buffer by f5
nnoremap <F5> :buffers<CR>:buffer<Space> 

" buffer next/prev
nnoremap <silent> <F12> :bn<CR>
nnoremap <silent> <S-F12> :bp<CR>

" switch next/prev tab
nmap <F7> gT
nmap <F8> gt

" jump between brackets
nmap <Leader><Space> %

" jump to closing tag
nmap <Leader>t vat<esc>

" jump to opening tag
nmap <Leader>T vato<esc>

" exit insert mode
inoremap jj <Esc>

" exit visual mode
vmap JJ <Esc>

" write buffer
noremap <Leader>s :write<CR>

" write and quit
noremap <Leader>S :write<CR>:quit<CR>

" disabled arrows
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>


" nerdtree
nnoremap <S-E> :NERDTreeFind<CR>


" search select text
vmap X y/<C-R>"<CR>

" switch between windows
nmap <Tab> <C-w>w

" insert python debug info
nmap <Leader>pd  oimport ipdb<Esc>oipdb.set_trace()<Esc>0


" exit vim
nmap <Leader>q :q <CR>
nmap <Leader>Q :qa <CR>

" execute open python file
autocmd FileType python nmap <Leader>vp :w <CR> :VimuxRunCommand("clear; python " . bufname("%")) <CR>

" execute rest client
autocmd FileType python nmap <Leader>vr :w <CR> :VimuxRunCommand("clear; ./rest_client.py local \| less") <CR>

" compile java class
autocmd FileType java nmap <Leader>vj :w <CR> :VimuxRunCommand("clear; javac " . bufname("%") . "; echo done") <CR>

" insert java main method
autocmd FileType java abbreviate psm public static void main(String[] args) {<CR>}

" out println
autocmd FileType java abbreviate sop System.out.println("")

" source ~/.vimrc
nmap <Leader>so :source ~/.vimrc <CR>
"
" format Xml
nmap <Leader>fx :call FormatXml() <CR>

" format selected xml
vmap <Leader>fx :call FormatSelectedXml() <CR>

" format json
nmap <Leader>fj :call FormatJson() <CR>:set filetype=json <CR>

" insert and format json from system buffer
nmap <Leader>fij :put +<cr>:set filetype=json<cr>:call FormatJson()<cr>

" insert and format xml from system buffer
nmap <Leader>fix :put +<cr>:set filetype=xml<cr>:call FormatXml()<cr>

" quick yank
" word
nmap <Leader>c mz"ayiw`z
" selected text
vmap <Leader>c "ay
" any object
nmap <Leader>C "by

" quick paste
nmap <Leader>z "ap 
nmap <Leader>x viw"ap
vmap <Leader>z "ap
nmap <Leader>Z "bp 
vmap <Leader>Z "bp

" open edit ~/.vimrc
nmap <Leader>ev :e ~/.vimrc <CR>

" help - list all bindings
nmap <leader>? :help index.txt<CR>

function! FormatXml()
  % ! python -c 'import lxml.etree as etree; import sys; 
	\text = etree.tostring(etree.fromstring(sys.stdin.read()), pretty_print=True, encoding="utf-8");
	\ print(text.decode("utf-8"))' 
endfunction

function! ParseRailwayLog()
    /<request>/ !python -c "import sys; import urllib.parse; text = sys.stdin.read(); print(urllib.parse.unquote_plus(text))"
    /<password>/ delete
endfunction	

function! FormatJson()
  %! python -c 'import fileinput, json; print(json.dumps(json.loads("".join(fileinput.input())), sort_keys=True, indent=4, ensure_ascii=False))' 
endfunction

function! FormatSelectedXml()
  '<,'> ! python -c 'import lxml.etree as etree; import sys; 
	\text = etree.tostring(etree.fromstring(sys.stdin.read()), pretty_print=True, encoding="utf-8"); print(text.decode("utf-8"))' 
endfunction

function! PythonTemplate()
  execute "normal o" . "def main():\<CR>    print(1)\<CR>"
  execute "normal! i" . "if __name__ == \"__main__\":\<CR>   main()\<CR>"
endfunction  

" copy current filename into clipboard
function! CopyCurrentFileFullPathIntoClipboard()
  ! echo %:p | xclip -selection clipboard
endfunction  

function! UrlEncode()
  '<,'> ! python -c 'import sys; import urllib.parse; print(urllib.parse.quote(sys.stdin.read()))'
endfunction

function! UrlDecode()
  '<,'> ! python -c 'import sys; import urllib.parse; print(urllib.parse.unquote(sys.stdin.read()))'
endfunction
